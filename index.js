// Generated by CoffeeScript 1.9.2
(function() {
  var slice = [].slice;

  require({
    xhtml: true
  }, ["lib/d3/d3", "lib/baobab/build/baobab.min", "lib/codemirror/lib/codemirror"], function(d3, Baobab, CodeMirror) {
    var Notebook, ns;
    Notebook = (function() {
      function Notebook(nb) {
        this.initData(nb).initSvg().initCursors().onCells();
        this.log("Notebook initialized");
      }

      Notebook.prototype.layer = function(label) {
        return this.$svg.selectAll("g").filter(function() {
          return label === (d3.select(this).attr(":inkscape:label"));
        });
      };

      Notebook.prototype.initSvg = function() {
        this.$svg = d3.select("svg");
        this.$base = this.$svg.select("#base");
        this.$cells = this.layer("cells");
        this.$cell = this.$cells.selectAll(".cell");
        "@$view = @$svg.insert \"g\", \":first-child\"\n  .classed nbv_base: true\n  .call (base) =>\n    base.append \"rect\"\n      .attr\n        width: @$base.attr \":inkscape:window-width\"\n        height: @$base.attr \":inkscape:window-height\"\n      .style\n        fill: @$base.attr \"pagecolor\"";
        return this;
      };

      Notebook.prototype.initData = function(nb) {
        this.data = new Baobab(nb);
        return this;
      };

      Notebook.prototype.initCursors = function() {
        this.cells = this.data.select("cells");
        this.cells.on("update", (function(_this) {
          return function() {
            return onCells();
          };
        })(this));
        return this;
      };

      Notebook.prototype.onCells = function() {
        this.$cell.data(this.cells.get()).call(function(cell) {
          return cell.enter().append("g").classed({
            nbv_cell: true
          }).append("foreignObject").attr({
            width: 500,
            height: 350
          }).append("xhtml:body").append("xhtml:div").each(function(d) {
            var cm;
            cm = new CodeMirror(this, {
              theme: "elegant"
            });
            return cm.setValue(d.source.join("\n"));
          });
        });
        return this;
      };

      Notebook.prototype.log = function() {
        var args;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        return console.log.apply(console, args);
      };

      return Notebook;

    })();
    ns = function(prefix, iri) {};
    ns("inkscape", "http://www.inkscape.org/namespaces/inkscape");
    return d3.json("index.ipynb", function(nb) {
      return this.nbv = new Notebook(nb);
    });
  });

}).call(this);

//# sourceMappingURL=index.js.map
